package fr.cristal.emeraude.n2s3.core

import akka.actor._

/**
  * Represents the messages that Neurons and Synapses will send to each other.
  */
abstract class Message

/**
  * Represents a spike. It carries a timestamp and a destination ActorRef. It is sent to
  * an intermediate actor that handles synchronization and observation.
  *
  * As it is not a case class to allow specialization by inheritance, one needs to define
  * the unapply method to allow pattern matching.
  */
class Spike(val timestamp: Int, val destination: ActorRef) extends Message
object Spike {
  def apply(t: Int, d: ActorRef) = new Spike(t, d)
  def unapply(s: Spike) = Some((s.timestamp, s.destination))
}

/**
  * Similar to Spike but is intended for the input neurons.
  * Comment by @pboulet: is useful or not?
  */
case class Input(override val timestamp: Int, override val destination: ActorRef) extends Spike(timestamp, destination)

/**
  * Base class for all the synchronization mechanism.
  */
class SyncMessage extends Message

/**
  * Act like an asynchronous acknowledgment, the priority queue will use this message to know
  * if it can process messages from the queue
  */
case object Done extends SyncMessage

/**
  * Generated by the priority queue, it will help the neurons & synapses to know when everything
  * is timed (timestamp and process by the priority queue)
  */
case object SpikeAck extends SyncMessage

/**
  * Base class for all the messages that connect the neurones and synapses together.
  */
abstract class WiringMessage extends Message

/**
  * Typical hello world type message, it isn't useful for real world application,
  * it's here for debug and test purposes
  */
case class Welcome() extends WiringMessage

/**
  * Used for discovering the network, it'll allow the synapses to send messages
  * to the neurons they're connected to in order to let him update its
  * sequences (parents & children).
  */
case class InformNeurons() extends WiringMessage

/**
  * Used for discovering the network, it'll allow the neurons to acknowledge
  * the reception of the message (from the synapses)
  */
case class InformNeurons_ack() extends WiringMessage

/**
  * Tell the neuron connected to this synapse : "this synapse is your father"
  * @param neuron for which the synapse is the father
  */
case class ImYourFather(neuron: ActorRef) extends WiringMessage

/**
  * Tell the neuron connected to this synapse : "this synapse is your child"
  * @param neuron for which the synapse is the child
  */
case class ImYourChild(neuron: ActorRef) extends WiringMessage

/**
  * Used like a getter to retrieve the layer of a neuron via its ActorRef
  */
case class GetLayer() extends WiringMessage

/**
  * Used by the logging feature for storing the output into a log file
  */
case class WriteIt(msg: String, filename: String) extends WiringMessage

/**
  * Used by the logging feature for printing the output onto the terminal's stdout
  */
case class WriteToLogFile(datalog: String) extends WiringMessage
case class PrintToStdout(datalog: String) extends WiringMessage

/**
  * Used by the logging feature for opening the descriptor file
  */
case class OpenLogFile(filename: String) extends WiringMessage

/**
  * Used by the logging feature for closing the descriptor file
  */
case class CloseLogFile() extends WiringMessage